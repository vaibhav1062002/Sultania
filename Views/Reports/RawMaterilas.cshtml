@{
    Layout = "~/Views/Shared/DashboardComan.cshtml";
}

@model SultaniaOil.ViewModels.PartyGradeProductViewModel;



<style>

    .error {
        color: red;
    }



    .custom-alert {
        background-color: #4CAF50;
        color: #fff;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        opacity: 0;
        transform: translateY(-20px);
        transition: opacity 0.3s ease-out, transform 0.3s ease-out;
        position: fixed;
        top: 20px;
        right: 20px;
    }

    .show {
        opacity: 1;
        transform: translateY(0);
    }

    @@keyframes slideIn {
        from {
            transform: translateY(-20px);
            opacity: 0;
        }

        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    @@keyframes slideOut {
        from {
            transform: translateY(0);
            opacity: 1;
        }

        to {
            transform: translateY(-20px);
            opacity: 0;
        }
    }





    /* Styles for the popup */
    #popup {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 20px;
        background: #fff;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        z-index: 9999;
    }
    /* Hide the table and calculation inputs initially */
    #dataTableWrapper,
    .form-group-total {
        display: none;
    }
    <!-- DataTables Buttons CSS -->
    .dataTables_wrapper .dataTables_length,
    .dataTables_wrapper .dataTables_buttons {
        margin-right: 20px;
    }
    /* Style the buttons with icons and colors */
    .dt-buttons .btn {
        background-color: #3498DB;
        /* Button background color */
        color: #fff;
        /* Button text color */
        border-color: #2980B9;
        /* Button border color */
    }

        .dt-buttons .btn:hover {
            background-color: #2980B9;
            /* Hover background color */
        }
    <!-- Customize button styles -->
    .dt-buttons button {
        color: rgb(252, 250, 250);
        font-weight: 500;
    }

    .dt-buttons button:hover {
        color: black;
    }

    .dt-buttons button.buttons-copy {
        background-color: #007BFF;
    }

    .dt-buttons button.buttons-csv {
        background-color: #28A745;
    }

    .dt-buttons button.buttons-excel {
        background-color: #FFC107;
    }

    .dt-buttons button.buttons-pdf {
        background-color: #DC3545;
    }

    .dt-buttons button.buttons-print {
        background-color: #6C757D;
    }

    .error-message {
        color: red;
    }

</style>






<!-- <h2 style="margin-top: 20px;color:#145566; font-weight: bold; margin-left: 20px;">BAG TO BAG FLEXO PRINTING PROGRAMME AND PRODUCTION  REPORT</h2> -->
<h5 class="panel-title" style="color:#FFFFFF; background-color:#009991; width:100%; font-size:14px; margin-bottom:10px; padding: 6px; margin-top:2px;" align="center"> &nbsp;Raw Materials Purchase Reports </h5>

<!-- Button to open the popup -->



    
    <div class="row">
        <div class="form-group col-md-2" style="margin-left:2px;">
            <label for="fromDate">From Date:</label>
            <input type="Date" class="form-control" id="fromDate">
        </div>

        <div class="form-group  col-md-2" style="margin-left:14px;">
            <label for="ToDate">To Date:</label>
            <input type="date" class="form-control" id="toDate">
        </div>


    <div class="col-md-2" >
        <label>Select Party <font color="#FF0000">*</font></label>
        <select name="PartyName" id="vendorName" class="form-control select" data-live-search="true" onchange="validateForm()">
            <option value="" disabled selected>Nothing Selected</option>
            @foreach (var data in Model.VendorEntities)
            {
                <option value="@data.Name">@data.Name</option>
            }
        </select>
        <span id="partyError" class="error"></span>
    </div>

    <div class="form-group  col-md-1  form-group-total" style="margin-left:10px">
        <label for="totalQuntity">Total Quantity:</label>
        <input type="text" class="form-control" id="totalQNT" readonly style="color:black">
    </div>
     

        <div class="col-md-1">
            <button class="btn btn-success" onclick="applyDateRange()" style="margin-top: 18px;">Filter Reports</button>
        </div>

    </div>

    <div class="filtredTable" style="padding:10px">
    <table id="dataTable" class="table  table-bordered">
            <thead>

                <tr>
                    <th>Sr No</th>
                    <th>Date</th>
                    <th>Party Name</th>
                    <th>Product Name</th>
                    <th>Grade</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var counter2 = 1;
                }
                @foreach (var data in Model.RawMaterials)
                {
                    <tr>
                        <td>@counter2</td>
                        <td>@data.Date.ToShortDateString()</td>
                        <td>@data.PartyName</td>
                        <td>@data.ProductName</td>
                        <td>@data.GradeName</td>
                        <td>@data.Quantity</td>

                    </tr>

                    counter2++;
                }



            </tbody>
        </table>
    
</div>



<script>
    var totalQuantity;
    var today = new Date().toISOString().split('T')[0];




    // Trigger animation on page load
    window.onload = function () {
        var tableRows = document.querySelectorAll("#dataTable tbody tr");

        // Variable to store total quantity
         totalQuantity = 0;

        // Loop through each table row
        tableRows.forEach(function (row) {
            var quantity = parseFloat(row.cells[5].textContent);
            totalQuantity += quantity;
        });
        $('#totalQNT').val(totalQuantity);
    };




    function applyDateRange() {
        // Example date strings in "DD-MM-YYYY" format
        var fromDate = document.getElementById("fromDate").value;
        var toDate = document.getElementById("toDate").value;

        // Function to convert "DD-MM-YYYY" to "DD/MM/YYYY" format
        function convertToSlashFormat(inputDate) {
            var parts = inputDate.split('-');
            return parts[1] + '/' + parts[2] + '/' + parts[0];
        }

        // Convert fromDate to "DD/MM/YYYY" format
        var fromDateFormatted = convertToSlashFormat(fromDate);

        // Convert toDate to "DD/MM/YYYY" format
        var toDateFormatted = convertToSlashFormat(toDate);

        console.log(fromDateFormatted);
        console.log(toDateFormatted);

        var vendorName = document.getElementById("vendorName").value;


        // Destroy existing DataTable instance (if any)
        var table = $('#dataTable').DataTable();
        table.destroy();

        // Hide all rows initially
        var tableRows = document.querySelectorAll("#dataTable tbody tr");

        tableRows.forEach(function (row) {
            row.style.display = "none";
        });

        totalQuantity = 0;

        // Show rows that fall within the selected date range and match the vendor
        tableRows.forEach(function (row) {
            var date = row.cells[1].textContent;
            var vendor = row.cells[2].textContent;

            if ((date >= fromDateFormatted && date <= toDateFormatted) && (vendor == vendorName)) {
                row.style.display = "";
                Quantity = parseFloat(row.cells[5].textContent);
                console.log(Quantity);
                totalQuantity += Quantity;
            }
        });

        $('#totalQNT').val(totalQuantity);

        // Reinitialize DataTable after showing relevant rows
        $('#dataTable').DataTable();

        // Show the table and calculation inputs
        document.querySelector(".filtredTable").style.display = "block";
        document.querySelector(".form-group-total").style.display = "block";
    }








    // Function to calculate total production
    function calculateTotalProduction() {
        var totalDayProduction = 0;
        var totalNightProduction = 0;
        // Iterate through visible table rows
        var visibleRows = document.querySelectorAll("#popup table tbody tr[style='']");
        visibleRows.forEach(function (row) {
            var shiftTime = row.cells[3].textContent; // Assuming the shift column is in the fourth cell
            var production = parseInt(row.cells[4].textContent); // Assuming the production column is in the fifth cell
            // Check shift time and add to the corresponding total
            if (shiftTime.toLowerCase() === 'day') {
                totalDayProduction += production;
            } else if (shiftTime.toLowerCase() === 'night') {
                totalNightProduction += production;
            }
        });
        // Display the totals in the input fields
        document.getElementById("totalDayCostInput").value = totalDayProduction;
        document.getElementById("totalNightCostInput").value = totalNightProduction;
    }




    // print reciept******************************************************
    function printReciept() {
        var printWindow = window.open('', '_blank');

        var table1 = $('.filtredTable').html();

        console.log(table1);

        printWindow.document.write('<div style="margin:120px;">');

        // Add style for table border
        printWindow.document.write('<style>');
        printWindow.document.write('table { border-collapse: collapse; width: 100%; }');
        printWindow.document.write('th, td { border: 1px solid #000; padding: 8px; text-align: left; }');
        printWindow.document.write('</style>');

        printWindow.document.write('<div>');
        printWindow.document.write(table1);
        printWindow.document.write('</div>');

        printWindow.document.write('</div>');

        printWindow.document.close();

        printWindow.print();
    }













</script>

